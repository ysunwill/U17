//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 1 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 1 colors.
  struct color {
    /// Color `AccentColor`.
    static let accentColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AccentColor")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func accentColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.accentColor.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 74 images.
  struct image {
    /// Image `banner_dot_selected`.
    static let banner_dot_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "banner_dot_selected")
    /// Image `banner_dot`.
    static let banner_dot = Rswift.ImageResource(bundle: R.hostingBundle, name: "banner_dot")
    /// Image `bg_comic_gray_mask`.
    static let bg_comic_gray_mask = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_comic_gray_mask")
    /// Image `bg_comment_separator`.
    static let bg_comment_separator = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_comment_separator")
    /// Image `bg_find_comic_nav`.
    static let bg_find_comic_nav = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_find_comic_nav")
    /// Image `bg_find_comic_top`.
    static let bg_find_comic_top = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_find_comic_top")
    /// Image `bg_tab_line`.
    static let bg_tab_line = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_tab_line")
    /// Image `find_comic_nav_cate_down`.
    static let find_comic_nav_cate_down = Rswift.ImageResource(bundle: R.hostingBundle, name: "find_comic_nav_cate_down")
    /// Image `find_comic_nav_cate_up`.
    static let find_comic_nav_cate_up = Rswift.ImageResource(bundle: R.hostingBundle, name: "find_comic_nav_cate_up")
    /// Image `find_comic_nav_pay_down`.
    static let find_comic_nav_pay_down = Rswift.ImageResource(bundle: R.hostingBundle, name: "find_comic_nav_pay_down")
    /// Image `find_comic_nav_pay_up`.
    static let find_comic_nav_pay_up = Rswift.ImageResource(bundle: R.hostingBundle, name: "find_comic_nav_pay_up")
    /// Image `find_comic_nav_rank_down`.
    static let find_comic_nav_rank_down = Rswift.ImageResource(bundle: R.hostingBundle, name: "find_comic_nav_rank_down")
    /// Image `find_comic_nav_rank_up`.
    static let find_comic_nav_rank_up = Rswift.ImageResource(bundle: R.hostingBundle, name: "find_comic_nav_rank_up")
    /// Image `find_comic_nav_search_down`.
    static let find_comic_nav_search_down = Rswift.ImageResource(bundle: R.hostingBundle, name: "find_comic_nav_search_down")
    /// Image `find_comic_nav_search_up`.
    static let find_comic_nav_search_up = Rswift.ImageResource(bundle: R.hostingBundle, name: "find_comic_nav_search_up")
    /// Image `find_comic_nav_vip_down`.
    static let find_comic_nav_vip_down = Rswift.ImageResource(bundle: R.hostingBundle, name: "find_comic_nav_vip_down")
    /// Image `find_comic_nav_vip_up`.
    static let find_comic_nav_vip_up = Rswift.ImageResource(bundle: R.hostingBundle, name: "find_comic_nav_vip_up")
    /// Image `icon_comic_camera`.
    static let icon_comic_camera = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_comic_camera")
    /// Image `icon_comic_collect`.
    static let icon_comic_collect = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_comic_collect")
    /// Image `icon_comic_forum_like`.
    static let icon_comic_forum_like = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_comic_forum_like")
    /// Image `icon_comic_hot`.
    static let icon_comic_hot = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_comic_hot")
    /// Image `icon_comic_info_more`.
    static let icon_comic_info_more = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_comic_info_more")
    /// Image `icon_comic_new_chapter`.
    static let icon_comic_new_chapter = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_comic_new_chapter")
    /// Image `icon_comic_reward_1`.
    static let icon_comic_reward_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_comic_reward_1")
    /// Image `icon_comic_reward_2`.
    static let icon_comic_reward_2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_comic_reward_2")
    /// Image `icon_comic_reward_3`.
    static let icon_comic_reward_3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_comic_reward_3")
    /// Image `icon_comic_reward`.
    static let icon_comic_reward = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_comic_reward")
    /// Image `icon_comic_title_vip`.
    static let icon_comic_title_vip = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_comic_title_vip")
    /// Image `icon_comic_uparrow`.
    static let icon_comic_uparrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_comic_uparrow")
    /// Image `icon_comment_like`.
    static let icon_comment_like = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_comment_like")
    /// Image `icon_comment`.
    static let icon_comment = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_comment")
    /// Image `icon_description_more`.
    static let icon_description_more = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_description_more")
    /// Image `icon_find_comic_play`.
    static let icon_find_comic_play = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_find_comic_play")
    /// Image `icon_find_more`.
    static let icon_find_more = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_find_more")
    /// Image `icon_good_comment`.
    static let icon_good_comment = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_good_comment")
    /// Image `icon_nav_back`.
    static let icon_nav_back = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_nav_back")
    /// Image `icon_nav_down`.
    static let icon_nav_down = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_nav_down")
    /// Image `icon_nav_report`.
    static let icon_nav_report = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_nav_report")
    /// Image `icon_nav_share`.
    static let icon_nav_share = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_nav_share")
    /// Image `icon_reward_lv0`.
    static let icon_reward_lv0 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_reward_lv0")
    /// Image `icon_reward_lv10`.
    static let icon_reward_lv10 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_reward_lv10")
    /// Image `icon_reward_lv1`.
    static let icon_reward_lv1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_reward_lv1")
    /// Image `icon_reward_lv2`.
    static let icon_reward_lv2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_reward_lv2")
    /// Image `icon_reward_lv3`.
    static let icon_reward_lv3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_reward_lv3")
    /// Image `icon_reward_lv4`.
    static let icon_reward_lv4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_reward_lv4")
    /// Image `icon_reward_lv5`.
    static let icon_reward_lv5 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_reward_lv5")
    /// Image `icon_reward_lv6`.
    static let icon_reward_lv6 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_reward_lv6")
    /// Image `icon_reward_lv7`.
    static let icon_reward_lv7 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_reward_lv7")
    /// Image `icon_reward_lv8`.
    static let icon_reward_lv8 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_reward_lv8")
    /// Image `icon_reward_lv9`.
    static let icon_reward_lv9 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_reward_lv9")
    /// Image `launch_bottom`.
    static let launch_bottom = Rswift.ImageResource(bundle: R.hostingBundle, name: "launch_bottom")
    /// Image `launch_top`.
    static let launch_top = Rswift.ImageResource(bundle: R.hostingBundle, name: "launch_top")
    /// Image `nodata`.
    static let nodata = Rswift.ImageResource(bundle: R.hostingBundle, name: "nodata")
    /// Image `normal_placeholder_h`.
    static let normal_placeholder_h = Rswift.ImageResource(bundle: R.hostingBundle, name: "normal_placeholder_h")
    /// Image `normal_placeholder_v`.
    static let normal_placeholder_v = Rswift.ImageResource(bundle: R.hostingBundle, name: "normal_placeholder_v")
    /// Image `rank_frist`.
    static let rank_frist = Rswift.ImageResource(bundle: R.hostingBundle, name: "rank_frist")
    /// Image `rank_second`.
    static let rank_second = Rswift.ImageResource(bundle: R.hostingBundle, name: "rank_second")
    /// Image `rank_third`.
    static let rank_third = Rswift.ImageResource(bundle: R.hostingBundle, name: "rank_third")
    /// Image `refresh_discover`.
    static let refresh_discover = Rswift.ImageResource(bundle: R.hostingBundle, name: "refresh_discover")
    /// Image `refresh_kiss`.
    static let refresh_kiss = Rswift.ImageResource(bundle: R.hostingBundle, name: "refresh_kiss")
    /// Image `refresh_loading_1`.
    static let refresh_loading_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "refresh_loading_1")
    /// Image `refresh_loading_2`.
    static let refresh_loading_2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "refresh_loading_2")
    /// Image `refresh_loading_3`.
    static let refresh_loading_3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "refresh_loading_3")
    /// Image `refresh_normal`.
    static let refresh_normal = Rswift.ImageResource(bundle: R.hostingBundle, name: "refresh_normal")
    /// Image `refresh_will_refresh`.
    static let refresh_will_refresh = Rswift.ImageResource(bundle: R.hostingBundle, name: "refresh_will_refresh")
    /// Image `tab_collect_no`.
    static let tab_collect_no = Rswift.ImageResource(bundle: R.hostingBundle, name: "tab_collect_no")
    /// Image `tab_collect_yes`.
    static let tab_collect_yes = Rswift.ImageResource(bundle: R.hostingBundle, name: "tab_collect_yes")
    /// Image `tab_comment`.
    static let tab_comment = Rswift.ImageResource(bundle: R.hostingBundle, name: "tab_comment")
    /// Image `tab_community_selected`.
    static let tab_community_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "tab_community_selected")
    /// Image `tab_community`.
    static let tab_community = Rswift.ImageResource(bundle: R.hostingBundle, name: "tab_community")
    /// Image `tab_find_selected`.
    static let tab_find_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "tab_find_selected")
    /// Image `tab_find`.
    static let tab_find = Rswift.ImageResource(bundle: R.hostingBundle, name: "tab_find")
    /// Image `tab_reward`.
    static let tab_reward = Rswift.ImageResource(bundle: R.hostingBundle, name: "tab_reward")
    /// Image `yaofan`.
    static let yaofan = Rswift.ImageResource(bundle: R.hostingBundle, name: "yaofan")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "banner_dot", bundle: ..., traitCollection: ...)`
    static func banner_dot(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.banner_dot, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "banner_dot_selected", bundle: ..., traitCollection: ...)`
    static func banner_dot_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.banner_dot_selected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bg_comic_gray_mask", bundle: ..., traitCollection: ...)`
    static func bg_comic_gray_mask(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_comic_gray_mask, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bg_comment_separator", bundle: ..., traitCollection: ...)`
    static func bg_comment_separator(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_comment_separator, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bg_find_comic_nav", bundle: ..., traitCollection: ...)`
    static func bg_find_comic_nav(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_find_comic_nav, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bg_find_comic_top", bundle: ..., traitCollection: ...)`
    static func bg_find_comic_top(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_find_comic_top, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bg_tab_line", bundle: ..., traitCollection: ...)`
    static func bg_tab_line(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_tab_line, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "find_comic_nav_cate_down", bundle: ..., traitCollection: ...)`
    static func find_comic_nav_cate_down(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.find_comic_nav_cate_down, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "find_comic_nav_cate_up", bundle: ..., traitCollection: ...)`
    static func find_comic_nav_cate_up(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.find_comic_nav_cate_up, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "find_comic_nav_pay_down", bundle: ..., traitCollection: ...)`
    static func find_comic_nav_pay_down(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.find_comic_nav_pay_down, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "find_comic_nav_pay_up", bundle: ..., traitCollection: ...)`
    static func find_comic_nav_pay_up(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.find_comic_nav_pay_up, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "find_comic_nav_rank_down", bundle: ..., traitCollection: ...)`
    static func find_comic_nav_rank_down(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.find_comic_nav_rank_down, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "find_comic_nav_rank_up", bundle: ..., traitCollection: ...)`
    static func find_comic_nav_rank_up(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.find_comic_nav_rank_up, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "find_comic_nav_search_down", bundle: ..., traitCollection: ...)`
    static func find_comic_nav_search_down(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.find_comic_nav_search_down, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "find_comic_nav_search_up", bundle: ..., traitCollection: ...)`
    static func find_comic_nav_search_up(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.find_comic_nav_search_up, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "find_comic_nav_vip_down", bundle: ..., traitCollection: ...)`
    static func find_comic_nav_vip_down(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.find_comic_nav_vip_down, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "find_comic_nav_vip_up", bundle: ..., traitCollection: ...)`
    static func find_comic_nav_vip_up(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.find_comic_nav_vip_up, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_comic_camera", bundle: ..., traitCollection: ...)`
    static func icon_comic_camera(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_comic_camera, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_comic_collect", bundle: ..., traitCollection: ...)`
    static func icon_comic_collect(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_comic_collect, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_comic_forum_like", bundle: ..., traitCollection: ...)`
    static func icon_comic_forum_like(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_comic_forum_like, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_comic_hot", bundle: ..., traitCollection: ...)`
    static func icon_comic_hot(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_comic_hot, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_comic_info_more", bundle: ..., traitCollection: ...)`
    static func icon_comic_info_more(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_comic_info_more, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_comic_new_chapter", bundle: ..., traitCollection: ...)`
    static func icon_comic_new_chapter(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_comic_new_chapter, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_comic_reward", bundle: ..., traitCollection: ...)`
    static func icon_comic_reward(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_comic_reward, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_comic_reward_1", bundle: ..., traitCollection: ...)`
    static func icon_comic_reward_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_comic_reward_1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_comic_reward_2", bundle: ..., traitCollection: ...)`
    static func icon_comic_reward_2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_comic_reward_2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_comic_reward_3", bundle: ..., traitCollection: ...)`
    static func icon_comic_reward_3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_comic_reward_3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_comic_title_vip", bundle: ..., traitCollection: ...)`
    static func icon_comic_title_vip(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_comic_title_vip, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_comic_uparrow", bundle: ..., traitCollection: ...)`
    static func icon_comic_uparrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_comic_uparrow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_comment", bundle: ..., traitCollection: ...)`
    static func icon_comment(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_comment, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_comment_like", bundle: ..., traitCollection: ...)`
    static func icon_comment_like(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_comment_like, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_description_more", bundle: ..., traitCollection: ...)`
    static func icon_description_more(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_description_more, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_find_comic_play", bundle: ..., traitCollection: ...)`
    static func icon_find_comic_play(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_find_comic_play, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_find_more", bundle: ..., traitCollection: ...)`
    static func icon_find_more(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_find_more, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_good_comment", bundle: ..., traitCollection: ...)`
    static func icon_good_comment(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_good_comment, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_nav_back", bundle: ..., traitCollection: ...)`
    static func icon_nav_back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_nav_back, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_nav_down", bundle: ..., traitCollection: ...)`
    static func icon_nav_down(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_nav_down, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_nav_report", bundle: ..., traitCollection: ...)`
    static func icon_nav_report(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_nav_report, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_nav_share", bundle: ..., traitCollection: ...)`
    static func icon_nav_share(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_nav_share, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_reward_lv0", bundle: ..., traitCollection: ...)`
    static func icon_reward_lv0(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_reward_lv0, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_reward_lv1", bundle: ..., traitCollection: ...)`
    static func icon_reward_lv1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_reward_lv1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_reward_lv10", bundle: ..., traitCollection: ...)`
    static func icon_reward_lv10(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_reward_lv10, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_reward_lv2", bundle: ..., traitCollection: ...)`
    static func icon_reward_lv2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_reward_lv2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_reward_lv3", bundle: ..., traitCollection: ...)`
    static func icon_reward_lv3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_reward_lv3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_reward_lv4", bundle: ..., traitCollection: ...)`
    static func icon_reward_lv4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_reward_lv4, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_reward_lv5", bundle: ..., traitCollection: ...)`
    static func icon_reward_lv5(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_reward_lv5, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_reward_lv6", bundle: ..., traitCollection: ...)`
    static func icon_reward_lv6(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_reward_lv6, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_reward_lv7", bundle: ..., traitCollection: ...)`
    static func icon_reward_lv7(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_reward_lv7, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_reward_lv8", bundle: ..., traitCollection: ...)`
    static func icon_reward_lv8(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_reward_lv8, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_reward_lv9", bundle: ..., traitCollection: ...)`
    static func icon_reward_lv9(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_reward_lv9, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "launch_bottom", bundle: ..., traitCollection: ...)`
    static func launch_bottom(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.launch_bottom, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "launch_top", bundle: ..., traitCollection: ...)`
    static func launch_top(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.launch_top, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "nodata", bundle: ..., traitCollection: ...)`
    static func nodata(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.nodata, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "normal_placeholder_h", bundle: ..., traitCollection: ...)`
    static func normal_placeholder_h(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.normal_placeholder_h, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "normal_placeholder_v", bundle: ..., traitCollection: ...)`
    static func normal_placeholder_v(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.normal_placeholder_v, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "rank_frist", bundle: ..., traitCollection: ...)`
    static func rank_frist(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rank_frist, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "rank_second", bundle: ..., traitCollection: ...)`
    static func rank_second(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rank_second, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "rank_third", bundle: ..., traitCollection: ...)`
    static func rank_third(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rank_third, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "refresh_discover", bundle: ..., traitCollection: ...)`
    static func refresh_discover(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.refresh_discover, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "refresh_kiss", bundle: ..., traitCollection: ...)`
    static func refresh_kiss(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.refresh_kiss, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "refresh_loading_1", bundle: ..., traitCollection: ...)`
    static func refresh_loading_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.refresh_loading_1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "refresh_loading_2", bundle: ..., traitCollection: ...)`
    static func refresh_loading_2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.refresh_loading_2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "refresh_loading_3", bundle: ..., traitCollection: ...)`
    static func refresh_loading_3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.refresh_loading_3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "refresh_normal", bundle: ..., traitCollection: ...)`
    static func refresh_normal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.refresh_normal, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "refresh_will_refresh", bundle: ..., traitCollection: ...)`
    static func refresh_will_refresh(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.refresh_will_refresh, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tab_collect_no", bundle: ..., traitCollection: ...)`
    static func tab_collect_no(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tab_collect_no, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tab_collect_yes", bundle: ..., traitCollection: ...)`
    static func tab_collect_yes(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tab_collect_yes, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tab_comment", bundle: ..., traitCollection: ...)`
    static func tab_comment(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tab_comment, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tab_community", bundle: ..., traitCollection: ...)`
    static func tab_community(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tab_community, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tab_community_selected", bundle: ..., traitCollection: ...)`
    static func tab_community_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tab_community_selected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tab_find", bundle: ..., traitCollection: ...)`
    static func tab_find(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tab_find, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tab_find_selected", bundle: ..., traitCollection: ...)`
    static func tab_find_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tab_find_selected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tab_reward", bundle: ..., traitCollection: ...)`
    static func tab_reward(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tab_reward, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "yaofan", bundle: ..., traitCollection: ...)`
    static func yaofan(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.yaofan, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if UIKit.UIImage(named: "launch_bottom", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'launch_bottom' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if UIKit.UIImage(named: "launch_top", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'launch_top' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
